// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/romanp1989/gophermart/internal/order (interfaces: OrderStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/romanp1989/gophermart/internal/domain"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderStorage) CreateOrder(arg0 context.Context, arg1 *domain.Order) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderStorageMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderStorage)(nil).CreateOrder), arg0, arg1)
}

// LoadOrder mocks base method.
func (m *MockOrderStorage) LoadOrder(arg0 context.Context, arg1 string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrder", arg0, arg1)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOrder indicates an expected call of LoadOrder.
func (mr *MockOrderStorageMockRecorder) LoadOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrder", reflect.TypeOf((*MockOrderStorage)(nil).LoadOrder), arg0, arg1)
}

// LoadOrdersToProcess mocks base method.
func (m *MockOrderStorage) LoadOrdersToProcess(arg0 context.Context) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrdersToProcess", arg0)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOrdersToProcess indicates an expected call of LoadOrdersToProcess.
func (mr *MockOrderStorageMockRecorder) LoadOrdersToProcess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrdersToProcess", reflect.TypeOf((*MockOrderStorage)(nil).LoadOrdersToProcess), arg0)
}

// LoadOrdersWithBalance mocks base method.
func (m *MockOrderStorage) LoadOrdersWithBalance(arg0 context.Context, arg1 domain.UserID) ([]domain.OrderWithBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrdersWithBalance", arg0, arg1)
	ret0, _ := ret[0].([]domain.OrderWithBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOrdersWithBalance indicates an expected call of LoadOrdersWithBalance.
func (mr *MockOrderStorageMockRecorder) LoadOrdersWithBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrdersWithBalance", reflect.TypeOf((*MockOrderStorage)(nil).LoadOrdersWithBalance), arg0, arg1)
}
